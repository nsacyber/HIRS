// Get version from main project gradle
def packVersion = properties.get("packageVersion")
def jarVersion = properties.get("jarVersion")
//println "packageVersion is ${projVersion}"

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    jaxb
}

dependencies {
    implementation libs.authlete.cbor
    implementation libs.bouncycastle
    implementation libs.commons.codec
    implementation libs.commons.lang3
    implementation libs.commons.io
    implementation libs.glassfish.jakarta.json
    implementation libs.glassfish.jaxb.runtime
    implementation libs.guava
    implementation libs.jackson.cbor
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jakarta.persistence.api
    implementation libs.jakarta.xml
    implementation libs.spring.boot.starter.log4j2
    implementation libs.minimal.json
    implementation libs.nimbus.jwt

    implementation libs.pci
    // explicitly include the patched version of the apache http client dependency
    implementation libs.apacheHttpClient

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test

    testImplementation project(path: ':HIRS_AttestationCA')

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.toURI().toString() }.join(' ')
        )
    }
    //jar name format: [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    archiveVersion = jarVersion
}

//task generateXjcLibrary(type:Exec) {
//    workingDir 'config'
//
//    commandLine './genXjcLibrary.sh'
//}
//compileJava.dependsOn generateXjcLibrary